#include <Wire.h>
#include <Adafruit_MLX90614.h>
#include <LiquidCrystal.h>
#define BLYNK_PRINT Serial
#include <ESP8266WiFi.h>
#include <BlynkSimpleEsp8266.h>
BlynkTimer timer;

char auth[] = "6ced08cd273148a4a81162544bcc3b26"; 
char ssid[] = "Health Monitor"; 
char pass[] = "0123456789";  
int flag=0;

const int rs = 2, en = 3, d4 = 4, d5 = 5, d6 = 6, d7 = 7;
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);

Adafruit_MLX90614 mlx = Adafruit_MLX90614();

int pulsePin = A0;                 
int blinkPin = 26;                

const int trigPin = 9;
const int echoPin = 10;
// defines variables
long duration;
int distance=0;

//Counter to change positions of pages

int page_counter=1 ;       

//-------Pins-----//
int up = 22;               
int down = 23;        
   
//---------Storage debounce function-----//
boolean current_up = LOW;          
boolean last_up=LOW;            
boolean last_down = LOW;
boolean current_down = LOW;

// Volatile Variables, used in the interrupt service routine!
volatile int BPM;                   
volatile int Signal;                
volatile int IBI = 600;             
volatile boolean Pulse = false;     
volatile boolean QS = false;       

static boolean serialVisual = true;   

volatile int rate[10];                      
volatile unsigned long sampleCounter = 0;          
volatile unsigned long lastBeatTime = 0;           
volatile int P = 512;                      
volatile int T = 512;                     
volatile int thresh = 525;               
volatile int amp = 100;                   
volatile boolean firstBeat = true;       
volatile boolean secondBeat = false;      
        
void setup() {
  
  Serial.begin(115200);
  Blynk.begin(Serial, auth);
  timer.setInterval(1000L,notifyOnTemp);
  timer setInterval(1000L, notifyOnBeat);
  interruptSetup();                 
  pinMode(25,OUTPUT);   
  pinMode(24,OUTPUT);
  lcd.begin(16, 2);
  digitalWrite(25,LOW);
  pinMode(trigPin, OUTPUT); 
  pinMode(echoPin, INPUT); 
  mlx.begin();  
  digitalWrite(24,LOW);
 
  lcd.setCursor(1, 0);
  lcd.print("G31 Capstonse");
  delay(3000);
  lcd.clear();
  lcd.setCursor(2, 0);
  lcd.print("Health Care");  
  lcd.setCursor(4, 1);
  lcd.print("Monitor");  
  delay(3000);
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Initializing...");
  delay(3000); 
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("PlaceTheFingerOn");
  lcd.setCursor(2, 1);
  lcd.print("PulseSensor");
  delay(5000); 
  lcd.clear();
}

boolean debounce(boolean last, int pin)
{
boolean current = digitalRead(pin);
if (last != current)
{
delay(5);
current = digitalRead(pin);
}
return current;
}

void loop() {

Blynk.run();
timer.run();

current_up = debounce(last_up, up);         
current_down = debounce(last_down, down);   

    if (last_up== LOW && current_up == HIGH){  
      lcd.clear();                     
      if(page_counter <3){              
      page_counter= page_counter +1;   
      
      }
      else{
      page_counter= 3;  
      }
  }
  
    last_up = current_up;

    if (last_down== LOW && current_down == HIGH){ 
      lcd.clear();                     
      if(page_counter >1){              
      page_counter= page_counter -1;   
      
      }
      else{
      page_counter= 1;  
      }
  }
    
    last_down = current_down;

  switch (page_counter) {
   
          lcd.setCursor(0,0);
      lcd.print("Button1:NEXT");
      lcd.setCursor(0,1);
      lcd.print("Button2:Previous");
    }
    break;

  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  duration = pulseIn(echoPin, HIGH);  
  distance= duration*0.034/2;   
  if(mlx.readObjectTempC() > 37) {
   digitalWrite(24,HIGH);
   Serial.print("HIGH TEMPERATURE(*C) :");
   Serial.println(mlx.readObjectTempC()); 
   delay(1000);
   lcd.clear();
   lcd.setCursor(0, 0);
   lcd.print("HIGH TEMPERATURE");
   lcd.setCursor(0, 1);
   lcd.print("BodyTemp:");
   lcd.print(mlx.readObjectTempC());
   lcd.println("*C");
   delay(1000);}
  else{
    digitalWrite(24,LOW);
    }
  lcd.clear();  

  Serial.print("Distance(CM) :"); 
  Serial.println(distance); 
  Serial.print("Temperature(*C) :"); 
  Serial.println(mlx.readObjectTempC()); 
  if(distance>12){
    lcd.print("Come Nearer");
  }
  else{
    lcd.print("Normal Temp.");
  }
  
  lcd.setCursor(0, 1);
  lcd.print("BodyTemp:");
  lcd.print(mlx.readObjectTempC());
  lcd.println("*C");
  
  delay(1000);
  else{
    digitalWrite(24,LOW);
    }
  lcd.clear();  

  Serial.print("Distance(CM) :"); 
  Serial.println(distance); 
  Serial.print("Temperature(*C) :"); 
  Serial.println(mlx.readObjectTempC()); 
  lcd.print("Distance:");
  lcd.println(distance);
  lcd.println("CM");
  lcd.setCursor(0, 1);
  lcd.print("BodyTemp:");
  lcd.print(mlx.readObjectTempC());
  lcd.println("*C");
  
  delay(1000);
    }
    break;

    case 3: {   
     serialOutput();  
   
  if (QS == true) // A Heartbeat Was Found
    {    
      serialOutputWhenBeatHappens();     
      QS = false;    
    }
     
  delay(20); 
    }
    break;
    
    
}

void interruptSetup()
{     
 
  TCCR2A = 0x02;    
  TCCR2B = 0x06;     
  OCR2A = 0X7C;      
  TIMSK2 = 0x02;     
  sei();             
} 

void serialOutput()
{   
 if (serialVisual == true)
  {  
     arduinoSerialMonitorVisual('-', Signal);   
  } 
 else
  {
      sendDataToSerial('S', Signal);     
   }        
}

void serialOutputWhenBeatHappens()
{    
 
 if(BPM >100 || BPM <60) {
   digitalWrite(25,HIGH);
   Serial.print("Warning...Risk...");
   lcd.clear();
   lcd.print("WARNING : Risk!!!");
   delay(50);}
  else{
    digitalWrite(25,LOW);
    }
  
 if (serialVisual == true) 
   {            
     Serial.print(" Heartbeat Rate ");  
     Serial.print("BPM: ");
     Serial.println(BPM);
     lcd.print("Heartbeat Rate ");
     lcd.setCursor(1,1);
     lcd.print("BPM: ");
     lcd.setCursor(5,1);
     lcd.print(BPM);
     delay(300);
     lcd.clear();
   }
 else
   {
     sendDataToSerial('B',BPM);   
     sendDataToSerial('Q',IBI);   
   }   
}

void arduinoSerialMonitorVisual(char symbol, int data )
{    
  const int sensorMin = 0;      
  const int sensorMax = 1024;   
  int sensorReading = data; 
  int range = map(sensorReading, sensorMin, sensorMax, 0, 11);
 
}


void sendDataToSerial(char symbol, int data )
{
   Serial.print(symbol);
   Serial.println(data);                
}

ISR(TIMER2_COMPA_vect) //triggered when Timer2 counts to 124
{  
  cli();                                      
  Signal = analogRead(pulsePin);             
  sampleCounter += 2;                         
  int N = sampleCounter - lastBeatTime;       
                                             
  if(Signal < thresh && N > (IBI/5)*3) 
    {      
      if (Signal < T) 
      {                        
        T = Signal;  
      }
    }

  if(Signal > thresh && Signal > P)
    {          
      P = Signal;                             
    }                                        

  
  if (N > 250)
  {                                   
    if ( (Signal > thresh) && (Pulse == false) && (N > (IBI/5)*3) )
      {        
        Pulse = true;                               
        digitalWrite(blinkPin,HIGH);                
        IBI = sampleCounter - lastBeatTime;         
        lastBeatTime = sampleCounter;               
  
        if(secondBeat)
        {                       
          secondBeat = false;                  
          for(int i=0; i<=9; i++) 
          {             
            rate[i] = IBI;                      
          }
        }
  
        if(firstBeat) 
        {                         
          firstBeat = false;                   
          secondBeat = true;                  
          sei();                               
          return;                              
        }   
     
      word runningTotal = 0;                     

      for(int i=0; i<=8; i++)
        {                
          rate[i] = rate[i+1];                  
          runningTotal += rate[i];              
        }

      rate[9] = IBI;                         
      runningTotal += rate[9];               
      runningTotal /= 10;                     
      BPM = 60000/runningTotal;               
      QS = true;                              
      
    }                       
  }

  if (Signal < thresh && Pulse == true)
    {   
      digitalWrite(blinkPin,LOW);           
      Pulse = false;                         
      amp = P - T;                          
      thresh = amp/2 + T;                  
      P = thresh;                           
      T = thresh;
    }

  if (N > 2500)
    {                        
      thresh = 512;                         
      P = 512;                               
      T = 512;                               
      lastBeatTime = sampleCounter;                  
      firstBeat = true;                      
      secondBeat = false;                   
    }

  sei();                                   
}
void notifyOnTemp()
{
  if(digitalRead(24 == HIGH)) {
    Serial.println("Alert!!!");
    Blynk.notify("High Temperature");
  }

void notifyOnBeat()
{
  if(digitalRead(25 == HIGH)) {
    Serial.println("Alert!!!");
    Blynk.notify("Heartrate exceed normal");
  }

}//end

